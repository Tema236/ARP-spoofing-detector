#!/usr/bin/env python3

import scapy.all as scapy
import telebot
import time

bot = telebot.TeleBot('5317854713:AAFIfqicq43Ks8UZigh31cSgPFjFXywGf60')

keyboard = telebot.types.InlineKeyboardMarkup()

keyboard.row(
    telebot.types.InlineKeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ ‚ÑπÔ∏è', callback_data='info')
)

keyboard.row(
    telebot.types.InlineKeyboardButton('–£–∫–∞–∑–∞—Ç—å —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å üíª', callback_data='interface')
)

keyboard.row(
    telebot.types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å üåê', callback_data='showint')
)

keyboard.row(
    telebot.types.InlineKeyboardButton('–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∂–∏–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞—Ç–∞–∫ ARP-Spoofing üì°', callback_data='run')
)



check_run = 0
interface = 'eth0'

@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.from_user.id, '–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ARP-spoofing detector, –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá', reply_markup=keyboard)

@bot.message_handler(content_types=["text"])
def send_message(message):
    a = message.text
    if (a[0] == 'i') and (a[1] == 'n') and (a[2] == 't'):
        global interface
        interface = str(a.replace('int', ''))
        bot.send_message(message.chat.id, '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω ‚úÖ', reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, '–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ ‚å®Ô∏è', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data == 'info':
        bot.send_message(call.message.chat.id, '–ï—Å–ª–∏ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –¥–∞–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ–¥–≤–µ—Ä–≥–Ω–µ—Ç—Å—è –∞—Ç–∞–∫–µ ARP-spoofing, —Ç–æ –¥–∞–Ω–Ω—ã–π –±–æ—Ç –æ–ø–æ–≤–µ—Å—Ç–∏—Ç –≤–∞—Å –æ–± —ç—Ç–æ–º üí°')
        bot.answer_callback_query(call.id)

    if call.data == 'interface':
        bot.send_message(call.message.chat.id, '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω—ã–π —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ int<–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å> \n–ü—Ä–∏–º–µ—Ä: intwlan0')
        bot.answer_callback_query(call.id)

    if call.data == 'showint':
        bot.send_message(call.message.chat.id, f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {interface}")
        bot.answer_callback_query(call.id)

    if call.data == 'run':
        global check_run
        if check_run == 0:
            bot.send_message(call.message.chat.id, '–ó–∞–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ ‚úÖ')
            check_run = 1

            def getmac(ip):
                arp_req = scapy.ARP(pdst=ip)
                brdcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
                arp_req_brdcast = brdcast / arp_req
                ans_list = scapy.srp(arp_req_brdcast, timeout=1, verbose=False)[0]
                return ans_list[0][1].hwsrc

            def sniffing_packet(interface):
                scapy.sniff(iface=interface, store=False, prn=choosing_packets)

            def choosing_packets(packet):
                if packet.haslayer(scapy.ARP) and packet[scapy.ARP].op == 2:
                    try:
                        realmac = getmac(packet[scapy.ARP].psrc)
                        respmac = packet[scapy.ARP].hwsrc

                        if realmac != respmac:
                            print("ARP-spoofing attack detected!")
                            bot.send_message(call.message.chat.id, '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞—Ç–∞–∫–∞ ARP-spoofing –Ω–∞ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ‚ùóÔ∏è')
                            time.sleep(5)
                            bot.send_message(call.message.chat.id, '–î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∑–∞—â–∏—â–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ç–∏–≤ —Ç–∞–∫–æ–π –∞—Ç–∞–∫–∏ \n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN üîí\n–í–∫–ª—é—á–∏—Ç–µ Firewall üõ° \n–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ç–∏ üåê')
                            time.sleep(15)
                    except IndexError:
                        pass

            sniffing_packet(interface)
        else:
            bot.send_message(call.message.from_user.id, 'Program already run')



    

if __name__ == '__main__':
     bot.infinity_polling()